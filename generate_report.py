import os
import json
from pathlib import Path
from reportlab.platypus import (
    BaseDocTemplate,
    PageTemplate,
    Frame,
    Image,
    Paragraph,
    Spacer,
)
from reportlab.lib.pagesizes import letter
from reportlab.lib.units import inch
from reportlab.pdfgen import canvas
from reportlab.lib.styles import getSampleStyleSheet


class CartographerDocTemplate(BaseDocTemplate):
    def __init__(self, filename, **kwargs):
        super().__init__(filename, **kwargs)
        frame = Frame(
            self.leftMargin, self.bottomMargin, self.width, self.height, id="normal"
        )
        template = PageTemplate(
            id="test", frames=frame, onPage=self.add_page_number_footer
        )
        self.addPageTemplates(template)

    def add_page_number_footer(self, canvas, doc):
        canvas.saveState()
        canvas.setFont("Times-Roman", 10)

        # Add footer text
        footer_text = "MeshCartographer - Report"
        canvas.drawString(inch, 0.75 * inch, footer_text)

        # Add page number
        page_number_text = f"Page {canvas.getPageNumber()}"
        canvas.drawString(inch, 0.5 * inch, page_number_text)

        # Add the logo
        image_path = Path(__file__).resolve().parent / "assets" / "logo.png"

        if image_path.exists():
            image_width = 1.0 * inch
            image_height = 1.0 * inch
            canvas.drawImage(
                image_path,
                doc.width + doc.leftMargin - image_width - 0.5 * inch,
                0.5 * inch,
                width=image_width,
                height=image_height,
                preserveAspectRatio=True,
                anchor="se",
            )

        canvas.restoreState()


def create_custom_pdf(image_path, pdf_path, data):
    try:
        # Create an instance of the CartographerDocTemplate
        doc = CartographerDocTemplate(pdf_path, pagesize=letter)

        # Create a style sheet
        styles = getSampleStyleSheet()

        # Add elements to the flowable elements
        elements = []

        # Title
        title = Paragraph("Mesh Cartographer Report", styles["Title"])
        elements.append(title)
        elements.append(Spacer(1, 0.25 * inch))

        # Initial area
        initial_area = data.get("initial_area", "N/A")
        initial_area_paragraph = Paragraph(
            f"Initial Area: {initial_area}", styles["Normal"]
        )
        elements.append(initial_area_paragraph)
        elements.append(Spacer(1, 0.25 * inch))

        # Add the image
        image = Image(image_path, width=6 * inch, height=4 * inch)
        elements.append(image)
        elements.append(Spacer(1, 0.25 * inch))

        # Build the PDF
        doc.build(elements)
        print(f"Custom PDF saved at: {pdf_path}")
    except Exception as e:
        print(f"An error occurred while creating the custom PDF: {e}")


def main():
    # Path to the image generated by generate_data.py
    image_filename = "img/spectre_border.png"
    image_path = Path(image_filename)

    if not image_path.exists():
        print(
            f"Image file {image_filename} does not exist. Please run generate_data.py first."
        )
        return

    # Load data from data.json
    data_filename = "data.json"
    if not os.path.exists(data_filename):
        print(
            f"Data file {data_filename} does not exist. Please run generate_data.py first."
        )
        return
    with open(data_filename, "r") as f:
        data = json.load(f)

    # Create the 'pdf' directory if it doesn't exist
    pdf_folder = "pdf"
    if not os.path.exists(pdf_folder):
        os.makedirs(pdf_folder)

    # Define the path for the PDF file
    pdf_filename = "mesh_cartographer.pdf"
    pdf_path = os.path.join(pdf_folder, pdf_filename)

    # Call the function to create the PDF
    create_custom_pdf(str(image_path), pdf_path, data)


if __name__ == "__main__":
    main()
